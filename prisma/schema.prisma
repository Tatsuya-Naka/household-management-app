// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  currency      String?
  location      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  records       Record[]
}

model VerificationToken {
  id            String @id @default(cuid())
  email         String
  token         String @unique
  expires       DateTime 

  @@unique([email, token])
}

model Record {
  id                String @id @default(cuid())
  userId            String 
  typeId            String
  currencyId        String
  resourceId        String?
  countryId         String
  income_amount     Float?
  income_categoryId String?
  income_status     String?
  genre             String?   
  object            String?  
  Items             Items[]
  comment           String?
  totalcost         Float?
  payment_method    String?
  regular_unit      String?
  regular_num       Int? 
  isSubmitted       Boolean @default(false)
  xrateId           String? 
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  date              String

  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
  type          type @relation(fields: [typeId], references: [id])
  currency      Currency  @relation(fields: [currencyId], references: [id])
  incomeresource      IncomeResource?  @relation(fields: [resourceId], references: [id])
  country       Country   @relation(fields: [countryId], references: [id])
  incomecategory  IncomeCategory? @relation(fields: [income_categoryId], references: [id])
  xrate         XRate? @relation(fields: [xrateId], references: [id])
}

model type {
  id            String @id @default(cuid())
  name          String @unique
  records       Record[]
}

model IncomeCategory {
  id            String @id @default(cuid())
  name          String @unique
  resourceId    String
  resource      IncomeResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  records       Record[]
  @@unique([name, resourceId])
}

model IncomeResource {
  id            String @id @default(cuid())
  name          String @unique
  records       Record[]
  categories    IncomeCategory[]
}

model Category {
  id            String @id @default(cuid())
  name          String @unique
  subcategories SubCategory[]
  items         Items[]
}

model SubCategory {
  id            String @id @default(cuid())
  name          String  @unique
  categoryId    String 
  category      Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  items         Items[]
}

model Currency {
  id            String @id @default(cuid())
  name          String @unique
  records       Record[]
}

model Country {
  id            String @id @default(cuid())
  name          String @unique
  records       Record[]
}

model Items {
  id            String  @id @default(cuid())
  item          String 
  categoryId    String 
  subcategoryId String?
  amount        Int
  cost          Float
  category      Category @relation(fields: [categoryId], references: [id])
  subcategory   SubCategory? @relation(fields: [subcategoryId], references: [id])
  recordId      String 
  record        Record @relation(fields: [recordId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model XRate {
  id            String @id @default(cuid())
  date          String @unique
  base          String @unique
  aud           Float
  jpy           Float 
  usd           Float 
  eur           Float
  gbp           Float 
  cad           Float 
  chf           Float 
  cny           Float 
  hkd           Float 
  krw           Float 
  mxn           Float 
  nzd           Float 
  sgd           Float 
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  records       Record[]
}